<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- DAO에서 어떻게 이 mapper를 부를 것인지 namespace 정해줌 -->

<!-- id와 name의 데이터가나옴 -->
<mapper namespace="Member">
	<!-- id는 쿼리문을 무엇으로 보낼 것인지 resultType은 결과물이 무엇인지 -->
	<!-- 로그인 구현 -->
	<select id="login" resultType="kr.co.metanet.dto.MemberDTO">
		select
		a.name, a.emp_code, a.emp_rank, c.org_name, e.code_name,
		(CASE WHEN c.org_upper is not null then (select CASE WHEN e2.code_name !=
		'최상위' THEN c2.org_name || e2.code_name
		ELSE c2.org_name
		END
		from tb_organization c2, tb_code e2
		where c.org_upper = c2.org_code
		and c2.org_div = e2.code)
		else null
		end) as org_upper, to_char(a.join_date, 'YYYY-MM-DD') as join_date,
		a.phone, b.id, d.acq_days_num, d.use_days_num, d.res_days_num
		from
		tb_Employee a,
		tb_account_normal b, tb_organization c, tb_Vacation_annual_Management d, tb_code e
		where b.id = #{id}
		and b.password = #{password}
		and certified_yn = 'Y'
		and id_use_yn = 'Y'
		and a.emp_code = b.emp_code
		and a.org_code = c.org_code
		and a.emp_code = d.emp_code
		and c.org_div = e.code
	</select>
	
	<!-- 로그인에 따른 메뉴 -->
	<select id="loginMenu" parameterType="String" resultType="kr.co.metanet.dto.AuthorityDTO">
		select hori_aam.id_code as id_code, hori_aam.emp_code as emp_code,
         max(hori_aam.AG0001) as AG0001,
         max(hori_aam.AG0002) as AG0002,
         max(hori_aam.AG0003) as AG0003,
         max(hori_aam.AG0004) as AG0004
         from
         (select an.id_code as id_code, an.emp_code as emp_code,
         DECODE(aam.ag_code , 'AG0001', aam.aa_use_yn) as AG0001,
         DECODE(aam.ag_code , 'AG0002', aam.aa_use_yn) as AG0002,
         DECODE(aam.ag_code , 'AG0003', aam.aa_use_yn) as AG0003,
         DECODE(aam.ag_code , 'AG0004', aam.aa_use_yn) as AG0004
         from tb_account_normal an,tb_account_ag_mapping aam
         where an.id_code = aam.id_code) hori_aam
         where emp_code = #{emp_code}
         group by hori_aam.id_code, hori_aam.emp_code
	</select>
	
	
	
	
	<!-- 회원가입 -->
	<insert id="signup" parameterType="kr.co.metanet.dto.MemberDTO">
		insert into tb_account_normal
		(id_code,
		id, password, emp_code,
		id_use_yn)
		values (#{id_code}, #{id},
		#{password},
		#{emp_code},
		#{id_use_yn})
	</insert>
	
	<!-- 회원가입 게스트 -->
	<insert id="signupguest" parameterType="kr.co.metanet.dto.MemberDTO">
		insert into tb_account_guest
		(id_code,
		id, password,
		id_use_yn)
		values (#{id_code_guest}, #{guestId},
		#{guestPassword},
		#{guest_id_use_yn})
	</insert>
	
	<!-- 회원가입 이메일 인증 -->
	<update id="createAuthKey">
		update tb_account_normal set certified_yn =
		#{authKey} where id
		= #{id}
	</update>

	<update id="userAuth">
		update tb_account_normal set certified_yn = 'Y' where
		id =
		#{id}
	</update>


	<!-- 아이디 코드체크(유효성검사) -->
	<select id="idCodeCheck" parameterType="String" resultType="int">
		select count(*) from (select id_code
		from tb_account_normal
		union
		select
		id_code
		from tb_account_guest) where id_code = #{id_code}
	</select>
	


	<!-- 아이디 체크(유효성검사) -->
	<select id="idCheck" parameterType="String" resultType="int">
		select count(*) from (select id
		from tb_account_normal
		union
		select
		id
		from tb_account_guest) where id = #{id}
	</select>

	<!-- emp_code check(유효성검사) -->
	<select id="empCodeCheck" parameterType="String"
		resultType="kr.co.metanet.dto.MemberDTO">

		select (select decode(an.emp_code, #{emp_code}, id, NULL)
		from tb_employee e, tb_account_normal an
		where e.emp_code=#{emp_code}
		and e.emp_code = an.emp_code) as id, name,
		org_name, emp_rank,
		to_char(join_date, 'YYYY-MM-DD') as join_date,
		gender, phone
		from
		tb_employee a, tb_organization b
		where a.emp_code = #{emp_code} and
		a.org_code = b.org_code

	</select>


	<!-- 사원코드 리스트 가져오기 -->
	<select id="getEmpCodeList"
		resultType="kr.co.metanet.dto.MemberDTO">
	select * from tb_employee order by emp_code asc
	</select>


	<!-- 유저 목록 불러오기, 전체 , 검색기능 -->
	<select id="getMemberList"
		resultType="kr.co.metanet.dto.MemberDTO">
		select
		a.emp_code, a.name, c.org_name, a.emp_rank, b.id, b.password,
		to_char(id_effective_start_date, 'YYYY-MM-DD') as
		id_effective_start_date,
		to_char(id_effective_end_date, 'YYYY-MM-DD')
		as id_effective_end_date, b.id_use_yn
		from
		tb_employee a,
		tb_account_normal b, tb_organization c
		where a.emp_code = b.emp_code
		and a.org_code = c.org_code
	
		<if test="searchType=='id' and keyword != null and keyword != '' ">
			AND b.id like '%' || #{keyword} || '%'
		</if>
		<if
			test="searchType=='emp_code' and keyword != null and keyword != '' ">
			AND a.emp_code like '%' || #{keyword} || '%'
		</if>
		<if
			test="searchType=='name' and keyword != null and keyword != '' ">
			AND a.name like '%' || #{keyword} || '%'
		</if>
		order by emp_code asc
	</select>


	<!--  유저목록에서 DETAIL버튼 클릭하여 유저 업데이트 -->
	<update id="updateMember"
		parameterType="kr.co.metanet.dto.MemberDTO">
		UPDATE tb_account_normal
		SET id = #{id} , password = #{password}
		, id_effective_start_date = #{id_effective_start_date},
		id_effective_end_date = #{id_effective_end_date},
		id_use_yn=#{id_use_yn}
		WHERE emp_code = #{emp_code}
	</update>

	<!-- 유저목록에서 DETAIL버튼 클릭하여 유저 삭제 -->
	<delete id="deleteMember" parameterType="String"> DELETE FROM tb_account_normal
		WHERE emp_code = #{emp_code}
	</delete>

	<!-- 권한 목록 불러오기 -->
	<select id="getAuthList" resultType="kr.co.metanet.dto.AuthorityDTO">
		select hori_aam.id_code as id_code, hori_aam.emp_code as emp_code,
		max(hori_aam.AG0001) as AG0001,
		max(hori_aam.AG0002) as AG0002,
		max(hori_aam.AG0003) as AG0003,
		max(hori_aam.AG0004) as AG0004
		from
		(select an.id_code as id_code, an.emp_code as emp_code,
		DECODE(aam.ag_code , 'AG0001', aam.aa_use_yn) as AG0001,
		DECODE(aam.ag_code , 'AG0002', aam.aa_use_yn) as AG0002,
		DECODE(aam.ag_code , 'AG0003', aam.aa_use_yn) as AG0003,
		DECODE(aam.ag_code , 'AG0004', aam.aa_use_yn) as AG0004
		from tb_account_normal an,tb_account_ag_mapping aam
		where an.id_code = aam.id_code) hori_aam
		group by hori_aam.id_code, hori_aam.emp_code
		order by hori_aam.id_code
	</select>
	
	<!--  권한목록에서 DETAIL버튼 클릭하여 권한 업데이트 -->
	<update id="updateAuthority" parameterType="kr.co.metanet.dto.AuthorityDTO">
		update tb_account_ag_mapping
		set aa_use_yn =
		case
		    when ag_code = 'AG0001' THEN #{AG0001}
		    when ag_code = 'AG0002' THEN #{AG0002}
		    when ag_code = 'AG0003' THEN #{AG0003}
		    when ag_code = 'AG0004' THEN #{AG0004}
		end
		, aa_effective_end_date =
		case
			when ag_code = 'AG0001' THEN #{AG0001_end_date}
			when ag_code = 'AG0002' THEN #{AG0002_end_date}
			when ag_code = 'AG0003' THEN #{AG0003_end_date}
			when ag_code = 'AG0004' THEN #{AG0004_end_date}
		end
		where id_code=#{id_code_auth}
	</update>
	
	
</mapper>

